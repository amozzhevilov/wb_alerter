"""Send message to telegram about the availability of free warehouses on WB"""

import os
import asyncio
from fuzzywuzzy import process
from telebot import async_telebot, asyncio_filters, types
from telebot.asyncio_storage import StateMemoryStorage
from telebot.states import State, StatesGroup
from telebot.states.asyncio.context import StateContext
from telebot.states.asyncio.middleware import StateMiddleware
from telebot.types import ReplyParameters
from time import sleep

from db import DB
from wb import WB, MyError

# –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞
MIN_SCORE_WAREHOUSE = 70

# –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ env
WB_TOKEN = os.getenv('WB_TOKEN')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WB API
wb = WB(WB_TOKEN)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DB
db = DB(DB_HOST='172.18.2.143')

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å Telebot
state_storage = StateMemoryStorage()
bot = async_telebot.AsyncTeleBot(TELEGRAM_BOT_TOKEN, state_storage=state_storage)


class AddWarehouseStates(StatesGroup):
    name = State()
    id = State()
    max_coef = State()
    delay = State()
    accept_type = State()


class DelWarehouseStates(StatesGroup):
    name = State()


ACCEPT_TYPES = [
    '–°—É–ø–µ—Ä—Å–µ–π—Ñ',
    '–ú–æ–Ω–æ–ø–∞–ª–ª–µ—Ç—ã',
    '–ö–æ—Ä–æ–±–∞',
    'QR-–ø–æ—Å—Ç–∞–≤–∫–∞ —Å –∫–æ—Ä–æ–±–∞–º–∏',
]


@bot.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è')
    markup.add(btn1)
    await bot.send_message(
        message.from_user.id,
        f'üëã –ü—Ä–∏–≤–µ—Ç {str(message.chat.first_name)}! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!',
        reply_parameters=ReplyParameters(message_id=message.message_id),
        reply_markup=markup,
    )


@bot.message_handler(
    text=[
        "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è",
        "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã",
        "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã",
        "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –°–¶",
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶",
        "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶",
    ]
)
async def get_text_message(message: types.Message, state: StateContext):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        db.update_user(message.chat.id, message.chat.first_name)
        await bot.send_message(
            message.from_user.id,
            '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
            reply_markup=get_default_menu(),
        )

    elif message.text == 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã':
        user_id = int(message.chat.id)
        warehouses_list = db.read_orders(user_id)
        msg = get_orders_from_list(warehouses_list)
        if not msg:
            msg = '–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –Ω–∏ –æ–¥–∏–Ω —Å–∫–ª–∞–¥!'
        await bot.send_message(message.from_user.id, msg, reply_markup=get_default_menu())

    elif message.text == 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã':
        # warehouses_list = db.read_warehouses('^(?!–°–¶)')
        warehouses_list = db.read_accessible_warehouses('^(?!–°–¶)')
        msg = get_msg_from_list(warehouses_list)
        await bot.send_message(message.from_user.id, msg, reply_markup=get_default_menu())

    elif message.text == 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –°–¶':
        # warehouses_list = db.read_warehouses('^(–°–¶)')
        warehouses_list = db.read_accessible_warehouses('^(–°–¶)')
        msg = get_msg_from_list(warehouses_list)
        await bot.send_message(message.from_user.id, msg, reply_markup=get_default_menu())

    elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶':
        await state.set(AddWarehouseStates.name)
        await bot.send_message(
            message.chat.id,
            'üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞/–°–¶',
            reply_parameters=ReplyParameters(message_id=message.message_id),
        )

    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶':
        if not db.read_orders(message.chat.id):
            msg = '–í—ã –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –Ω–∏ –æ–¥–∏–Ω —Å–∫–ª–∞–¥!'
            await bot.send_message(message.from_user.id, msg, reply_markup=get_default_menu())
            return
        await state.set(DelWarehouseStates.name)
        await bot.send_message(
            message.chat.id,
            'üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞/–°–¶',
            reply_parameters=ReplyParameters(message_id=message.message_id),
        )


@bot.message_handler(state=AddWarehouseStates.name)
async def warehouse_name_get(message: types.Message, state: StateContext):
    try:
        warehouses_list = db.read_warehouses()
        warehouse, score = process.extractOne(message.text, warehouses_list)
        if score < MIN_SCORE_WAREHOUSE:
            await state.set(AddWarehouseStates.name)
            await bot.send_message(
                message.chat.id,
                '–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫.',
                reply_parameters=ReplyParameters(message_id=message.message_id),
            )
            return
        await state.add_data(name=warehouse)
        await state.add_data(id=db.read_warehouse_id(warehouse))

        await state.set(AddWarehouseStates.max_coef)
        await bot.send_message(
            message.chat.id,
            '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏—ë–º–∫–∏ –æ—Ç 0 –¥–æ 20.',
            reply_parameters=ReplyParameters(message_id=message.message_id),
        )
    except Exception as error:
        await bot.reply_to(message, f'oooops: {error}')


@bot.message_handler(state=AddWarehouseStates.max_coef)
async def warehouse_coef_get(message: types.Message, state: StateContext):
    try:
        try:
            max_coef = int(message.text)
        except:
            await bot.send_message(
                message.chat.id,
                '–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏—ë–º–∫–∏ –æ—Ç 0 –¥–æ 20.',
                reply_parameters=ReplyParameters(message_id=message.message_id),
            )
            return
        if max_coef < 0 or max_coef > 20:
            await bot.send_message(
                message.chat.id,
                '–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏—ë–º–∫–∏ –æ—Ç 0 –¥–æ 20.',
                reply_parameters=ReplyParameters(message_id=message.message_id),
            )
            return
        await state.add_data(max_coef=max_coef)
        await state.set(AddWarehouseStates.delay)
        await bot.send_message(
            message.chat.id,
            '–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã?',
            reply_parameters=ReplyParameters(message_id=message.message_id),
        )
    except Exception as error:
        await bot.reply_to(message, f'oooops: {error}')


@bot.message_handler(state=AddWarehouseStates.delay)
async def warehouse_delay_get(message: types.Message, state: StateContext):
    try:
        try:
            delay = int(message.text)
        except:
            await bot.send_message(
                message.chat.id,
                '–í –æ—Ç–≤–µ—Ç–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ. –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –Ω–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å —Å–ª–æ—Ç—ã?',
                reply_parameters=ReplyParameters(message_id=message.message_id),
            )
            return
        await state.add_data(delay=delay)
        await state.set(AddWarehouseStates.accept_type)

        keyboard = types.ReplyKeyboardMarkup(row_width=1)
        buttons = [types.KeyboardButton(accept_type) for accept_type in ACCEPT_TYPES]
        keyboard.add(*buttons)

        await bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:',
            reply_markup=keyboard,
            reply_parameters=ReplyParameters(message_id=message.message_id),
        )

    except Exception as error:
        await bot.reply_to(message, f'oooops: {error}')


@bot.message_handler(state=AddWarehouseStates.accept_type)
async def warehouse_accept_type_get(message: types.Message, state: StateContext):
    try:
        if message.text not in ACCEPT_TYPES:
            keyboard = types.ReplyKeyboardMarkup(row_width=1)
            buttons = [types.KeyboardButton(accept_type) for accept_type in ACCEPT_TYPES]
            keyboard.add(*buttons)

            await bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:',
                reply_markup=keyboard,
                reply_parameters=ReplyParameters(message_id=message.message_id),
            )
        await state.add_data(accept_type=message.text)
        async with state.data() as data:
            name = data.get('name')
            id = data.get('id')
            max_coef = data.get('max_coef')
            delay = data.get('delay')
            accept_type = data.get('accept_type')
            db.create_order(message.chat.id, id, max_coef, delay, accept_type)
            msg = (
                f'–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: —Å–∫–ª–∞–¥ - {name}, '
                f'–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ –ø—Ä–∏–µ–º–∫–∏ - {max_coef}, '
                f'—Å–º–æ—Ç—Ä–∏–º —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ {delay} –¥–Ω–µ–π, '
                f'—Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏ - {accept_type}. '
            )
        await bot.send_message(
            message.chat.id,
            msg,
            reply_markup=get_default_menu(),
            reply_parameters=ReplyParameters(message_id=message.message_id),
        )
        await state.delete()
    except Exception as error:
        await bot.reply_to(message, f'oooops: {error}')


DelWarehouseStates


@bot.message_handler(state=DelWarehouseStates.name)
async def warehouse_delete(message: types.Message, state: StateContext):
    try:
        warehouses_list = db.read_warehouses()
        warehouse, score = process.extractOne(message.text, warehouses_list)
        if score < MIN_SCORE_WAREHOUSE:
            await state.set(DelWarehouseStates.name)
            await bot.send_message(
                message.chat.id,
                '–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫.',
                reply_parameters=ReplyParameters(message_id=message.message_id),
            )
            return
        warehouse_id = db.read_warehouse_id(warehouse)
        db.delete_order(message.chat.id, warehouse_id)
        await bot.send_message(
            message.chat.id,
            f'C–∫–ª–∞–¥ {warehouse} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!',
            reply_markup=get_default_menu(),
        )
    except Exception as error:
        await bot.reply_to(message, f'oooops: {error}')


def get_default_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn1 = types.KeyboardButton('üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã')
    btn2 = types.KeyboardButton('üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã')
    btn3 = types.KeyboardButton('üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –°–¶')
    btn4 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶')
    btn5 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶')
    markup.add(btn1, btn2, btn3, btn4, btn5)
    return markup


async def send_message_to_user(messages):
    for key in list(messages.keys()):
        chat_id = key
        text = messages.get(key)
        await bot.send_message(chat_id, text)


def get_msg_from_list(list, prefix='', postfix=''):
    msg = ''
    for row in list:
        accept_type, warehouses, min_coef, max_coef = row
        msg += f'{prefix} üì¶: {accept_type}, üöõ: {warehouses}, ‚ÇΩ: {min_coef}-{max_coef} {postfix}\n'
    return msg


def get_orders_from_list(orders):
    msg = ''
    for order in orders:
        warehouse, max_coef, delay, type = order
        msg += f'–°–∫–ª–∞–¥: {warehouse}, '
        msg += f'–º–∞–∫—Å. –∫–æ—ç—Ñ. –ø—Ä–∏–µ–º–∫–∏ {max_coef}, '
        msg += f'—Å–º–æ—Ç—Ä–∏–º —Å–ª–æ—Ç—ã —á–µ—Ä–µ–∑ {delay} –¥–Ω., '
        msg += f'—Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏ - {type}\n'
    return msg


def get_msg_from_result(slots):
    result = {}
    for slot in slots:
        user_id, warehose_name, acceptance_date, acceptance_coef, acceptance_type = slot
        msg = ''
        if user_id in result:
            msg = result[user_id]
        msg += f'–°–∫–ª–∞–¥: {warehose_name}, '
        msg += f'–¥–∞—Ç–∞ –ø—Ä–∏–µ–º–∫–∏: {acceptance_date.strftime("%d.%m.%Y")}, '
        msg += f'–∫–æ—ç—Ñ. –ø—Ä–∏–µ–º–∫–∏: {acceptance_coef}, '
        msg += f'—Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏: {acceptance_type}.\n'
        result[user_id] = msg
    return result


async def main():
    bot.add_custom_filter(asyncio_filters.StateFilter(bot))
    bot.add_custom_filter(asyncio_filters.TextMatchFilter())
    bot.setup_middleware(StateMiddleware(bot))
    asyncio.create_task(bot.polling())

    # –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
    previous_result = []

    while True:
        try:
            pass
            # –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
            coefficients = wb.get_coefficients()
        except MyError:
            print('Ooppsss... we get error')
            sleep(10)
            continue

        db.update_limits(coefficients)

        current_result = db.read_all_slots()

        result = [val for val in current_result if val not in previous_result]
        previous_result = current_result

        msg = get_msg_from_result(result)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        task_send_message = asyncio.create_task(send_message_to_user(msg))
        await task_send_message

        # —Å–ø–∏–º
        await asyncio.sleep(15)


if __name__ == '__main__':
    asyncio.run(main())
