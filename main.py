"""Send message to telegram about the availability of free warehouses on WB"""

import os
import re
import requests
import sys
import yaml
from datetime import datetime, timedelta, timezone
from time import sleep
from telebot import telebot, types

from wb import WB, MyError

# –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ env
WB_TOKEN = os.getenv('WB_TOKEN')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
CONFIG_FILE = 'config.yaml'

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å WB API
wb = WB(WB_TOKEN)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å Telebot
telegram_bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)


@telegram_bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è')
    # btn2 = types.KeyboardButton('üá¨üáß English')
    markup.add(btn1)
    telegram_bot.send_message(message.from_user.id, f'üëã –ü—Ä–∏–≤–µ—Ç {str(message.chat.first_name)}! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫!', reply_markup=markup)    

@telegram_bot.message_handler(commands=['add'])
def add(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    telegram_bot.send_message(message.from_user.id, f'‚úÖ –°–∫–ª–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω!', reply_markup=markup)    


@telegram_bot.message_handler(content_types=['text'])
def get_text_message(message):
    if message.text == 'üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        btn1 = types.KeyboardButton('üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã')
        btn2 = types.KeyboardButton('üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã')
        btn3 = types.KeyboardButton('üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –°–¶')
        btn4 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶')
        btn5 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶')
        markup.add(btn1, btn2, btn3, btn4, btn5)
        telegram_bot.send_message(message.from_user.id, '‚ùì –ó–∞–¥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å', reply_markup=markup)  #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    elif message.text == 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–ª–∞–¥—ã':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        user_id = int(message.chat.id)
        warehouses_list = get_warehouses_for_user_id(warehouses, user_id)
        msg = get_msg_from_list(warehouses_list)
        telegram_bot.send_message(message.from_user.id, msg, reply_markup=markup)
    elif message.text == 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–ª–∞–¥—ã':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        warehouses_list = get_warehouses_by_name(wb.get_warehouses(), 'name', '^(?!–°–¶)')
        msg = get_msg_from_list(warehouses_list, 'üì¶')
        telegram_bot.send_message(message.from_user.id, msg, reply_markup=markup)
    elif message.text == 'üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –°–¶':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        warehouses_list = get_warehouses_by_name(wb.get_warehouses(), 'name', '^(–°–¶)')
        msg = get_msg_from_list(warehouses_list, 'üöõ')
        telegram_bot.send_message(message.from_user.id, msg, reply_markup=markup)
    elif message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–ª–∞–¥/–°–¶':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        telegram_bot.send_message(message.from_user.id, '‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /add <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞> <–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ. –ø—Ä–∏–µ–º–∫–∏> <–∑–∞–¥–µ—Ä–∂–∫—É –≤ –¥–Ω—è—Ö>', reply_markup=markup)


def telegram_bot_sendtext(bot_message):
    """Send message to telegram."""
    bot_token = TELEGRAM_BOT_TOKEN
    bot_chat_id = TELEGRAM_CHAT_ID
    send_text = (
        'https://api.telegram.org/bot'
        + bot_token
        + '/sendMessage?chat_id='
        + bot_chat_id
        + '&parse_mode=Markdown&text='
        + bot_message
    )

    response = requests.get(send_text, timeout=10)

    return response.json()


def send_message(result):
    """Convert relust list to user message"""
    msg = ''

    for i in result:
        msg += f"–°–∫–ª–∞–¥: {i['warehouseName']}, "
        msg += f"–¥–∞—Ç–∞: {datetime.fromisoformat(i['date']).strftime('%Y-%m-%d')}, "
        msg += f"–∫–æ—ç—Ñ. {i['coefficient']}.\n"
    # telegram_bot_sendtext(msg)


def get_timedelta_to_now(date):
    """Return timedelta from date to now"""
    return datetime.fromisoformat(date) - datetime.now(timezone.utc)


def get_warehouses_for_user_id(warehouses, user_id):
    """Get lits of warehouses for user_id"""
    result = []
    for warehouse in warehouses:
        if warehouse['user_id'] == user_id:
            for wh in warehouse['warehouse']:
                result.append(wh)
    return result


def get_warehouses_by_name(warehouses, field, regexp='.*'):
    result = []
    for warehouse in warehouses:
        if (
            field in warehouse
            and re.match(regexp, warehouse[field])
        ):
            result.append(warehouse[field])
    return result


def get_msg_from_list(list, prefix='', postfix=''):
    msg = ''
    for element in list:
        msg += f'{prefix} {element} {postfix}\n'
    return msg


def get_warehouse(result, warehouse, coefficients):
    """Find warehouse by condition"""

    for coefficient in coefficients:

        # –∫–æ—ç—Ñ -1 - —Å–∫–ª–∞–¥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if coefficient['coefficient'] == -1:
            continue

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –Ω–∞–º —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏
        if coefficient['boxTypeName'] not in warehouse['boxTypeName']:
            continue

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –Ω–∞–º —Å–∫–ª–∞–¥. * - –ø–æ–¥—Ö–æ–¥–∏—Ç –ª—é–±–æ–π —Å–∫–ª–∞–¥
        if 'warehouse' in warehouse and coefficient['warehouseName'] not in warehouse['warehouse']:
            continue

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—ç—Ñ. —Å–∫–ª–∞–¥–∞, –¥–∞—Ç—É –ø—Ä–∏–µ–º–∫–∏ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —Å–∫–ª–∞–¥ —Ä–∞–Ω–µ–µ.
        if (
            coefficient['coefficient'] <= warehouse['max_coefficient']
            and get_timedelta_to_now(coefficient['date']) >= timedelta(days=warehouse['delay'])
            and coefficient not in result
        ):
            result.append(coefficient)


def main():
    """Main function"""
    global warehouses
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ CONFIG_FILE
    try:
        # Open file in read-only mode
        with open(CONFIG_FILE, 'r', encoding='utf-8') as file:
            warehouses = yaml.safe_load(file)
    except IOError as e:
        sys.exit(e.errno)
    except yaml.YAMLError as error:
        print(f'Error yaml parsing: {error}')
        sys.exit(-1)

    telegram_bot.polling(none_stop=True, interval=0) #–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–∞—Å—Ç—å

    # –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
    previous_list = []

    while True:
        try:
            # –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ —Å–∫–ª–∞–¥–∞–º
            coefficients = wb.get_coefficients()
        except MyError:
            sleep(10)
            continue

        # –≤ –ª–∏—Å—Ç result –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Å–∫–ª–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç
        result = []
        for warehouse in warehouses:
            get_warehouse(result, warehouse, coefficients)

        current_list = sorted(result, key=lambda d: d['warehouseName'])

        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∫–ª–∞–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        result = []
        for i in current_list:
            if i not in previous_list:
                result.append(i)

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_message(result)

        # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
        previous_list = current_list

        # —Å–ø–∏–º
        sleep(60)


if __name__ == '__main__':
    main()
